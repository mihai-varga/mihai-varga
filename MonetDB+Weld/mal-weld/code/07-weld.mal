+-------------------------------------------------------------------------------------------------------------------------------------+
| mal                                                                                                                                 |
+=====================================================================================================================================+
| function user.s2_1():void;                                                                                                          |
|     X_8:void := querylog.define("explain\nselect\n supp_nation,\n cust_nation,\n l_year,\n sum(volume) as revenue\nfrom\n (\n selec |
: t\n n1.n_name as supp_nation,\n n2.n_name as cust_nation,\n extract(year from l_shipdate) as l_year,\n l_extendedprice * (1 - l_dis :
: count) as volume\n from\n supplier,\n lineitem,\n orders,\n customer,\n nation n1,\n nation n2\n where\n s_suppkey = l_suppkey\n an :
: d o_orderkey = l_orderkey\n and c_custkey = o_custkey\n and s_nationkey = n1.n_nationkey\n and c_nationkey = n2.n_nationkey\n and ( :
: \n (n1.n_name = \\'FRANCE\\' and n2.n_name = \\'GERMANY\\')\n or (n1.n_name = \\'GERMANY\\' and n2.n_name = \\'FRANCE\\')\n )\n and :
:  l_shipdate between date \\'1995-01-01\\' and date \\'1996-12-31\\'\n ) as shipping\ngroup by\n supp_nation,\n cust_nation,\n l_yea :
: r\norder by\n supp_nation,\n cust_nation,\n l_year;":str, "weld_pipe":str, 224:int);                                                :
|     X_301:bat[:str] := bat.new(nil:str);                                                                                            |
|     X_308:bat[:str] := bat.append(X_301:bat[:str], "sys.shipping":str);                                                             |
|     X_318:bat[:str] := bat.append(X_308:bat[:str], "sys.shipping":str);                                                             |
|     X_324:bat[:str] := bat.append(X_318:bat[:str], "sys.shipping":str);                                                             |
|     X_332:bat[:str] := bat.append(X_324:bat[:str], "sys.L16":str);                                                                  |
|     X_303:bat[:str] := bat.new(nil:str);                                                                                            |
|     X_310:bat[:str] := bat.append(X_303:bat[:str], "supp_nation":str);                                                              |
|     X_319:bat[:str] := bat.append(X_310:bat[:str], "cust_nation":str);                                                              |
|     X_325:bat[:str] := bat.append(X_319:bat[:str], "l_year":str);                                                                   |
|     X_334:bat[:str] := bat.append(X_325:bat[:str], "revenue":str);                                                                  |
|     X_304:bat[:str] := bat.new(nil:str);                                                                                            |
|     X_312:bat[:str] := bat.append(X_304:bat[:str], "char":str);                                                                     |
|     X_321:bat[:str] := bat.append(X_312:bat[:str], "char":str);                                                                     |
|     X_327:bat[:str] := bat.append(X_321:bat[:str], "int":str);                                                                      |
|     X_336:bat[:str] := bat.append(X_327:bat[:str], "decimal":str);                                                                  |
|     X_305:bat[:int] := bat.new(nil:int);                                                                                            |
|     X_314:bat[:int] := bat.append(X_305:bat[:int], 25:int);                                                                         |
|     X_322:bat[:int] := bat.append(X_314:bat[:int], 25:int);                                                                         |
|     X_329:bat[:int] := bat.append(X_322:bat[:int], 32:int);                                                                         |
|     X_338:bat[:int] := bat.append(X_329:bat[:int], 18:int);                                                                         |
|     X_307:bat[:int] := bat.new(nil:int);                                                                                            |
|     X_316:bat[:int] := bat.append(X_307:bat[:int], 0:int);                                                                          |
|     X_323:bat[:int] := bat.append(X_316:bat[:int], 0:int);                                                                          |
|     X_331:bat[:int] := bat.append(X_323:bat[:int], 0:int);                                                                          |
|     X_340:bat[:int] := bat.append(X_331:bat[:int], 4:int);                                                                          |
|     X_11:int := sql.mvc();                                                                                                          |
|     C_12:bat[:oid] := sql.tid(X_11:int, "sys":str, "supplier":str);                                                                 |
|     X_15:bat[:int] := sql.bind(X_11:int, "sys":str, "supplier":str, "s_suppkey":str, 0:int);                                        |
|     X_25:bat[:oid] := sql.bind_idxbat(X_11:int, "sys":str, "supplier":str, "supplier_s_nationkey_fkey":str, 0:int);                 |
|     (X_28:bat[:oid], X_29:bat[:oid]) := sql.bind_idxbat(X_11:int, "sys":str, "supplier":str, "supplier_s_nationkey_fkey":str, 2:int |
: );                                                                                                                                  :
|     X_27:bat[:oid] := sql.bind_idxbat(X_11:int, "sys":str, "supplier":str, "supplier_s_nationkey_fkey":str, 1:int);                 |
|     X_30:bat[:oid] := sql.delta(X_25:bat[:oid], X_28:bat[:oid], X_29:bat[:oid], X_27:bat[:oid]);                                    |
|     C_32:bat[:oid] := sql.tid(X_11:int, "sys":str, "lineitem":str);                                                                 |
|     X_34:bat[:int] := sql.bind(X_11:int, "sys":str, "lineitem":str, "l_suppkey":str, 0:int);                                        |
|     X_41:bat[:lng] := sql.bind(X_11:int, "sys":str, "lineitem":str, "l_extendedprice":str, 0:int);                                  |
|     X_48:bat[:lng] := sql.bind(X_11:int, "sys":str, "lineitem":str, "l_discount":str, 0:int);                                       |
|     X_55:bat[:date] := sql.bind(X_11:int, "sys":str, "lineitem":str, "l_shipdate":str, 0:int);                                      |
|     X_62:bat[:oid] := sql.bind_idxbat(X_11:int, "sys":str, "lineitem":str, "lineitem_l_orderkey_fkey":str, 0:int);                  |
|     (X_65:bat[:oid], X_66:bat[:oid]) := sql.bind_idxbat(X_11:int, "sys":str, "lineitem":str, "lineitem_l_orderkey_fkey":str, 2:int) |
: ;                                                                                                                                   :
|     X_64:bat[:oid] := sql.bind_idxbat(X_11:int, "sys":str, "lineitem":str, "lineitem_l_orderkey_fkey":str, 1:int);                  |
|     X_67:bat[:oid] := sql.delta(X_62:bat[:oid], X_65:bat[:oid], X_66:bat[:oid], X_64:bat[:oid]);                                    |
|     C_92:bat[:oid] := sql.tid(X_11:int, "sys":str, "orders":str);                                                                   |
|     X_94:bat[:oid] := sql.bind_idxbat(X_11:int, "sys":str, "orders":str, "orders_o_custkey_fkey":str, 0:int);                       |
|     (X_97:bat[:oid], X_98:bat[:oid]) := sql.bind_idxbat(X_11:int, "sys":str, "orders":str, "orders_o_custkey_fkey":str, 2:int);     |
|     X_96:bat[:oid] := sql.bind_idxbat(X_11:int, "sys":str, "orders":str, "orders_o_custkey_fkey":str, 1:int);                       |
|     X_99:bat[:oid] := sql.delta(X_94:bat[:oid], X_97:bat[:oid], X_98:bat[:oid], X_96:bat[:oid]);                                    |
|     C_112:bat[:oid] := sql.tid(X_11:int, "sys":str, "nation":str);                                                                  |
|     X_114:bat[:str] := sql.bind(X_11:int, "sys":str, "nation":str, "n_name":str, 0:int);                                            |
|     C_154:bat[:oid] := sql.tid(X_11:int, "sys":str, "customer":str);                                                                |
|     X_156:bat[:oid] := sql.bind_idxbat(X_11:int, "sys":str, "customer":str, "customer_c_nationkey_fkey":str, 0:int);                |
|     (X_159:bat[:oid], X_160:bat[:oid]) := sql.bind_idxbat(X_11:int, "sys":str, "customer":str, "customer_c_nationkey_fkey":str, 2:i |
: nt);                                                                                                                                :
|     X_158:bat[:oid] := sql.bind_idxbat(X_11:int, "sys":str, "customer":str, "customer_c_nationkey_fkey":str, 1:int);                |
|     X_161:bat[:oid] := sql.delta(X_156:bat[:oid], X_159:bat[:oid], X_160:bat[:oid], X_158:bat[:oid]);                               |
|     wstate:ptr := weld.initstate();                                                                                                 |
|     X_24:bat[:int] := weld.algebraprojection(C_12:bat[:oid], X_15:bat[:int], wstate:ptr);                                           |
|     X_61:bat[:date] := weld.algebraprojection(C_32:bat[:oid], X_55:bat[:date], wstate:ptr);                                         |
|     X_71:bat[:oid] := weld.algebraselect(X_61:bat[:date], "1995-01-01":date, "1996-12-31":date, true:bit, true:bit, false:bit, wsta |
: te:ptr);                                                                                                                            :
|     X_40:bat[:int] := weld.algebraprojection(C_32:bat[:oid], X_34:bat[:int], wstate:ptr);                                           |
|     X_75:bat[:int] := weld.algebraprojection(X_71:bat[:oid], X_40:bat[:int], wstate:ptr);                                           |
|     (X_80:bat[:oid], X_81:bat[:oid]) := weld.algebrajoin(X_24:bat[:int], X_75:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng, wsta |
: te:ptr);                                                                                                                            :
|     X_68:bat[:oid] := weld.algebraprojection(C_32:bat[:oid], X_67:bat[:oid], wstate:ptr);                                           |
|     X_79:bat[:oid] := weld.algebraprojection(X_71:bat[:oid], X_68:bat[:oid], wstate:ptr);                                           |
|     X_91:bat[:oid] := weld.algebraprojection(X_81:bat[:oid], X_79:bat[:oid], wstate:ptr);                                           |
|     (X_101:bat[:oid], X_102:bat[:oid]) := weld.algebrajoin(X_91:bat[:oid], C_92:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng, ws |
: tate:ptr);                                                                                                                          :
|     X_31:bat[:oid] := weld.algebraprojection(C_12:bat[:oid], X_30:bat[:oid], wstate:ptr);                                           |
|     X_86:bat[:oid] := weld.algebraprojection(X_80:bat[:oid], X_31:bat[:oid], wstate:ptr);                                           |
|     X_104:bat[:oid] := weld.algebraprojection(X_101:bat[:oid], X_86:bat[:oid], wstate:ptr);                                         |
|     X_120:bat[:str] := weld.algebraprojection(C_112:bat[:oid], X_114:bat[:str], wstate:ptr);                                        |
|     X_128:bat[:oid] := weld.algebrathetaselect(X_120:bat[:str], "FRANCE":str, "==":str, wstate:ptr);                                |
|     X_133:bat[:oid] := weld.algebrathetaselect(X_120:bat[:str], "GERMANY":str, "==":str, wstate:ptr);                               |
|     X_134:bat[:oid] := weld.batmergecand(X_128:bat[:oid], X_133:bat[:oid], wstate:ptr);                                             |
|     X_136:bat[:oid] := weld.algebraprojection(X_134:bat[:oid], C_112:bat[:oid], wstate:ptr);                                        |
|     (X_137:bat[:oid], X_138:bat[:oid]) := weld.algebrajoin(X_104:bat[:oid], X_136:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng,  |
: wstate:ptr);                                                                                                                        :
|     X_100:bat[:oid] := weld.algebraprojection(C_92:bat[:oid], X_99:bat[:oid], wstate:ptr);                                          |
|     X_111:bat[:oid] := weld.algebraprojection(X_102:bat[:oid], X_100:bat[:oid], wstate:ptr);                                        |
|     X_151:bat[:oid] := weld.algebraprojection(X_137:bat[:oid], X_111:bat[:oid], wstate:ptr);                                        |
|     (X_163:bat[:oid], X_164:bat[:oid]) := weld.algebrajoin(X_151:bat[:oid], C_154:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng,  |
: wstate:ptr);                                                                                                                        :
|     X_162:bat[:oid] := weld.algebraprojection(C_154:bat[:oid], X_161:bat[:oid], wstate:ptr);                                        |
|     X_177:bat[:oid] := weld.algebraprojection(X_164:bat[:oid], X_162:bat[:oid], wstate:ptr);                                        |
|     X_185:bat[:str] := weld.algebraprojection(C_112:bat[:oid], X_114:bat[:str], wstate:ptr);                                        |
|     X_193:bat[:oid] := weld.algebrathetaselect(X_185:bat[:str], "GERMANY":str, "==":str, wstate:ptr);                               |
|     X_198:bat[:oid] := weld.algebrathetaselect(X_185:bat[:str], "FRANCE":str, "==":str, wstate:ptr);                                |
|     X_199:bat[:oid] := weld.batmergecand(X_193:bat[:oid], X_198:bat[:oid], wstate:ptr);                                             |
|     X_201:bat[:oid] := weld.algebraprojection(X_199:bat[:oid], C_112:bat[:oid], wstate:ptr);                                        |
|     (X_202:bat[:oid], X_203:bat[:oid]) := weld.algebrajoin(X_177:bat[:oid], X_201:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng,  |
: wstate:ptr);                                                                                                                        :
|     X_200:bat[:str] := weld.algebraprojection(X_199:bat[:oid], X_185:bat[:str], wstate:ptr);                                        |
|     X_221:bat[:str] := weld.algebraprojection(X_203:bat[:oid], X_200:bat[:str], wstate:ptr);                                        |
|     X_135:bat[:str] := weld.algebraprojection(X_134:bat[:oid], X_120:bat[:str], wstate:ptr);                                        |
|     X_152:bat[:str] := weld.algebraprojection(X_138:bat[:oid], X_135:bat[:str], wstate:ptr);                                        |
|     X_174:bat[:str] := weld.algebraprojection(X_163:bat[:oid], X_152:bat[:str], wstate:ptr);                                        |
|     X_217:bat[:str] := weld.algebraprojection(X_202:bat[:oid], X_174:bat[:str], wstate:ptr);                                        |
|     X_229:bat[:oid] := weld.algebrathetaselect(X_217:bat[:str], "FRANCE":str, "==":str, wstate:ptr);                                |
|     X_234:bat[:oid] := weld.algebrathetaselect(X_221:bat[:str], X_229:bat[:oid], "GERMANY":str, "==":str, wstate:ptr);              |
|     X_237:bat[:oid] := weld.algebrathetaselect(X_217:bat[:str], "GERMANY":str, "==":str, wstate:ptr);                               |
|     X_241:bat[:oid] := weld.algebrathetaselect(X_221:bat[:str], X_237:bat[:oid], "FRANCE":str, "==":str, wstate:ptr);               |
|     X_242:bat[:oid] := weld.batmergecand(X_234:bat[:oid], X_241:bat[:oid], wstate:ptr);                                             |
|     X_47:bat[:lng] := weld.algebraprojection(C_32:bat[:oid], X_41:bat[:lng], wstate:ptr);                                           |
|     X_76:bat[:lng] := weld.algebraprojection(X_71:bat[:oid], X_47:bat[:lng], wstate:ptr);                                           |
|     X_88:bat[:lng] := weld.algebraprojection(X_81:bat[:oid], X_76:bat[:lng], wstate:ptr);                                           |
|     X_106:bat[:lng] := weld.algebraprojection(X_101:bat[:oid], X_88:bat[:lng], wstate:ptr);                                         |
|     X_146:bat[:lng] := weld.algebraprojection(X_137:bat[:oid], X_106:bat[:lng], wstate:ptr);                                        |
|     X_168:bat[:lng] := weld.algebraprojection(X_163:bat[:oid], X_146:bat[:lng], wstate:ptr);                                        |
|     X_211:bat[:lng] := weld.algebraprojection(X_202:bat[:oid], X_168:bat[:lng], wstate:ptr);                                        |
|     X_246:bat[:lng] := weld.algebraprojection(X_242:bat[:oid], X_211:bat[:lng], wstate:ptr);                                        |
|     X_54:bat[:lng] := weld.algebraprojection(C_32:bat[:oid], X_48:bat[:lng], wstate:ptr);                                           |
|     X_77:bat[:lng] := weld.algebraprojection(X_71:bat[:oid], X_54:bat[:lng], wstate:ptr);                                           |
|     X_89:bat[:lng] := weld.algebraprojection(X_81:bat[:oid], X_77:bat[:lng], wstate:ptr);                                           |
|     X_107:bat[:lng] := weld.algebraprojection(X_101:bat[:oid], X_89:bat[:lng], wstate:ptr);                                         |
|     X_147:bat[:lng] := weld.algebraprojection(X_137:bat[:oid], X_107:bat[:lng], wstate:ptr);                                        |
|     X_169:bat[:lng] := weld.algebraprojection(X_163:bat[:oid], X_147:bat[:lng], wstate:ptr);                                        |
|     X_212:bat[:lng] := weld.algebraprojection(X_202:bat[:oid], X_169:bat[:lng], wstate:ptr);                                        |
|     X_247:bat[:lng] := weld.algebraprojection(X_242:bat[:oid], X_212:bat[:lng], wstate:ptr);                                        |
|     X_265:bat[:lng] := weld.batcalcsub(100:lng, X_247:bat[:lng], wstate:ptr);                                                       |
|     X_268:bat[:lng] := weld.batcalcmul(X_246:bat[:lng], X_265:bat[:lng], wstate:ptr);                                               |
|     X_78:bat[:date] := weld.algebraprojection(X_71:bat[:oid], X_61:bat[:date], wstate:ptr);                                         |
|     X_90:bat[:date] := weld.algebraprojection(X_81:bat[:oid], X_78:bat[:date], wstate:ptr);                                         |
|     X_108:bat[:date] := weld.algebraprojection(X_101:bat[:oid], X_90:bat[:date], wstate:ptr);                                       |
|     X_148:bat[:date] := weld.algebraprojection(X_137:bat[:oid], X_108:bat[:date], wstate:ptr);                                      |
|     X_170:bat[:date] := weld.algebraprojection(X_163:bat[:oid], X_148:bat[:date], wstate:ptr);                                      |
|     X_213:bat[:date] := weld.algebraprojection(X_202:bat[:oid], X_170:bat[:date], wstate:ptr);                                      |
|     X_248:bat[:date] := weld.algebraprojection(X_242:bat[:oid], X_213:bat[:date], wstate:ptr);                                      |
|     X_258:bat[:int] := weld.batmtimeyear(X_248:bat[:date], wstate:ptr);                                                             |
|     X_256:bat[:str] := weld.algebraprojection(X_242:bat[:oid], X_221:bat[:str], wstate:ptr);                                        |
|     X_252:bat[:str] := weld.algebraprojection(X_242:bat[:oid], X_217:bat[:str], wstate:ptr);                                        |
|     (X_270:bat[:oid], X_271:bat[:oid], X_272:bat[:lng]) := weld.groupgroup(X_252:bat[:str], wstate:ptr);                            |
|     (X_273:bat[:oid], X_274:bat[:oid], X_275:bat[:lng]) := weld.groupgroup(X_256:bat[:str], X_270:bat[:oid], wstate:ptr);           |
|     (X_276:bat[:oid], X_277:bat[:oid], X_278:bat[:lng]) := weld.groupgroup(X_258:bat[:int], X_273:bat[:oid], wstate:ptr);           |
|     X_282:bat[:lng] := weld.aggrsubsum(X_268:bat[:lng], X_276:bat[:oid], X_277:bat[:oid], true:bit, true:bit, wstate:ptr);          |
|     X_281:bat[:int] := weld.algebraprojection(X_277:bat[:oid], X_258:bat[:int], wstate:ptr);                                        |
|     X_280:bat[:str] := weld.algebraprojection(X_277:bat[:oid], X_256:bat[:str], wstate:ptr);                                        |
|     X_279:bat[:str] := weld.algebraprojection(X_277:bat[:oid], X_252:bat[:str], wstate:ptr);                                        |
|     (X_282:bat[:lng], X_281:bat[:int], X_280:bat[:str], X_279:bat[:str]) := weld.run(wstate:ptr, C_12:bat[:oid], X_15:bat[:int], C_ |
: 32:bat[:oid], X_55:bat[:date], "1995-01-01":date, "1996-12-31":date, true:bit, true:bit, false:bit, X_34:bat[:int], nil:BAT, nil:BA :
: T, nil:lng, X_67:bat[:oid], C_92:bat[:oid], X_30:bat[:oid], C_112:bat[:oid], X_114:bat[:str], "FRANCE":str, "==":str, "GERMANY":str :
: , nil:BAT, nil:BAT, false:bit, nil:lng, X_99:bat[:oid], C_154:bat[:oid], X_161:bat[:oid], C_112:bat[:oid], X_114:bat[:str], "GERMAN :
: Y":str, "==":str, "FRANCE":str, nil:BAT, nil:BAT, false:bit, nil:lng, "==":str, X_41:bat[:lng], X_48:bat[:lng], 100:lng, true:bit,  :
: true:bit);                                                                                                                          :
|     (X_285:bat[:str], X_286:bat[:oid], X_287:bat[:oid]) := algebra.sort(X_279:bat[:str], false:bit, false:bit);                     |
|     (X_290:bat[:str], X_291:bat[:oid], X_292:bat[:oid]) := algebra.sort(X_280:bat[:str], X_286:bat[:oid], X_287:bat[:oid], false:bi |
: t, false:bit);                                                                                                                      :
|     (X_293:bat[:int], X_294:bat[:oid], X_295:bat[:oid]) := algebra.sort(X_281:bat[:int], X_291:bat[:oid], X_292:bat[:oid], false:bi |
: t, false:bit);                                                                                                                      :
|     wstate:ptr := weld.initstate();                                                                                                 |
|     X_299:bat[:lng] := weld.algebraprojection(X_294:bat[:oid], X_282:bat[:lng], wstate:ptr);                                        |
|     X_298:bat[:int] := weld.algebraprojection(X_294:bat[:oid], X_281:bat[:int], wstate:ptr);                                        |
|     X_297:bat[:str] := weld.algebraprojection(X_294:bat[:oid], X_280:bat[:str], wstate:ptr);                                        |
|     X_296:bat[:str] := weld.algebraprojection(X_294:bat[:oid], X_279:bat[:str], wstate:ptr);                                        |
|     (X_299:bat[:lng], X_298:bat[:int], X_297:bat[:str], X_296:bat[:str]) := weld.run(wstate:ptr, X_294:bat[:oid], X_282:bat[:lng],  |
: X_281:bat[:int], X_280:bat[:str], X_279:bat[:str]);                                                                                 :
|     sql.resultSet(X_332:bat[:str], X_334:bat[:str], X_336:bat[:str], X_338:bat[:int], X_340:bat[:int], X_296:bat[:str], X_297:bat[: |
: str], X_298:bat[:int], X_299:bat[:lng]);                                                                                            :
| end user.s2_1;                                                                                                                      |
| #inline               actions= 0 time=5 usec                                                                                        |
| #remap                actions= 3 time=105 usec                                                                                      |
| #costmodel            actions= 1 time=7 usec                                                                                        |
| #coercion             actions= 0 time=5 usec                                                                                        |
| #evaluate             actions=20 time=87 usec                                                                                       |
| #emptybind            actions= 7 time=29 usec                                                                                       |
| #pushselect           actions= 0 time=7 usec                                                                                        |
| #aliases              actions=27 time=25 usec                                                                                       |
| #deadcode             actions=54 time=39 usec                                                                                       |
| #weld                 actions=81 time=1679 usec                                                                                     |
| #aliases              actions= 0 time=4 usec                                                                                        |
| #constants            actions=43 time=78 usec                                                                                       |
| #commonTerms          actions= 2 time=191 usec                                                                                      |
| #projectionpath       actions= 0 time=15 usec                                                                                       |
| #deadcode             actions= 2 time=47 usec                                                                                       |
| #matpack              actions= 0 time=1 usec                                                                                        |
| #multiplex            actions= 0 time=6 usec                                                                                        |
| #profiler             actions=1 time=5 usec                                                                                         |
| #candidates           actions=1 time=6 usec                                                                                         |
| #deadcode             actions= 0 time=42 usec                                                                                       |
| #wlc                  actions= 0 time=2 usec                                                                                        |
| #garbagecollector     actions= 1 time=300 usec                                                                                      |
| #total                actions=25 time=2975 usec                                                                                     |
+-------------------------------------------------------------------------------------------------------------------------------------+
168 tuples
