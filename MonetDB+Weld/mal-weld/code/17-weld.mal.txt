+-------------------------------------------------------------------------------------------------------------------------------------+
| mal                                                                                                                                 |
+=====================================================================================================================================+
| function user.main():void;                                                                                                          |
|     X_9:void := querylog.define("explain\nselect\n sum(l_extendedprice) / 7.0 as avg_yearly\nfrom\n lineitem,\n part\nwhere\n p_par |
: tkey = l_partkey\n and p_brand = 'Brand#23'\n and p_container = 'MED BOX'\n and l_quantity < (\n select\n 0.2 * avg(l_quantity)\n f :
: rom\n lineitem\n where\n l_partkey = p_partkey\n );":str, "weld_pipe":str, 205:int);                                                :
|     X_12:int := sql.mvc();                                                                                                          |
|     C_13:bat[:oid] := sql.tid(X_12:int, "sys":str, "lineitem":str);                                                                 |
|     X_26:bat[:int] := sql.bind(X_12:int, "sys":str, "lineitem":str, "l_partkey":str, 0:int);                                        |
|     X_47:bat[:lng] := sql.bind(X_12:int, "sys":str, "lineitem":str, "l_quantity":str, 0:int);                                       |
|     X_161:bat[:str] := sql.bind(X_12:int, "sys":str, "part":str, "p_brand":str, 0:int);                                             |
|     C_152:bat[:oid] := sql.tid(X_12:int, "sys":str, "part":str);                                                                    |
|     X_168:bat[:str] := sql.bind(X_12:int, "sys":str, "part":str, "p_container":str, 0:int);                                         |
|     X_154:bat[:int] := sql.bind(X_12:int, "sys":str, "part":str, "p_partkey":str, 0:int);                                           |
|     X_193:bat[:int] := sql.bind(X_12:int, "sys":str, "lineitem":str, "l_orderkey":str, 0:int);                                      |
|     X_211:bat[:lng] := sql.bind(X_12:int, "sys":str, "lineitem":str, "l_extendedprice":str, 0:int);                                 |
|     wstate:ptr := weld.initstate();                                                                                                 |
|     X_32:bat[:int] := weld.algebraprojection(C_13:bat[:oid], X_26:bat[:int], wstate:ptr);                                           |
|     X_182:bat[:oid] := weld.algebrathetaselect(X_161:bat[:str], C_152:bat[:oid], "Brand#23":str, "==":str, wstate:ptr);             |
|     X_187:bat[:oid] := weld.algebrathetaselect(X_168:bat[:str], X_182:bat[:oid], "MED BOX":str, "==":str, wstate:ptr);              |
|     X_188:bat[:int] := weld.algebraprojection(X_187:bat[:oid], X_154:bat[:int], wstate:ptr);                                        |
|     X_204:bat[:int] := weld.algebraprojection(C_13:bat[:oid], X_26:bat[:int], wstate:ptr);                                          |
|     (X_217:bat[:oid], X_218:bat[:oid]) := weld.algebrajoin(X_188:bat[:int], X_204:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng,  |
: wstate:ptr);                                                                                                                        :
|     X_223:bat[:int] := weld.algebraprojection(X_217:bat[:oid], X_188:bat[:int], wstate:ptr);                                        |
|     (X_233:bat[:oid], X_234:bat[:oid]) := weld.algebrajoin(X_32:bat[:int], X_223:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng, w |
: state:ptr);                                                                                                                         :
|     X_198:bat[:int] := weld.algebraprojection(C_13:bat[:oid], X_193:bat[:int], wstate:ptr);                                         |
|     X_226:bat[:int] := weld.algebraprojection(X_218:bat[:oid], X_198:bat[:int], wstate:ptr);                                        |
|     X_230:bat[:oid] := weld.batcalcidentity(X_226:bat[:int], wstate:ptr);                                                           |
|     X_259:bat[:oid] := weld.algebraprojection(X_234:bat[:oid], X_230:bat[:oid], wstate:ptr);                                        |
|     (X_260:bat[:oid], X_261:bat[:oid], X_262:bat[:lng]) := weld.groupgroup(X_259:bat[:oid], wstate:ptr);                            |
|     X_216:bat[:lng] := weld.algebraprojection(C_13:bat[:oid], X_211:bat[:lng], wstate:ptr);                                         |
|     X_229:bat[:lng] := weld.algebraprojection(X_218:bat[:oid], X_216:bat[:lng], wstate:ptr);                                        |
|     X_257:bat[:lng] := weld.algebraprojection(X_234:bat[:oid], X_229:bat[:lng], wstate:ptr);                                        |
|     X_264:bat[:lng] := weld.algebraprojection(X_261:bat[:oid], X_257:bat[:lng], wstate:ptr);                                        |
|     X_210:bat[:lng] := weld.algebraprojection(C_13:bat[:oid], X_47:bat[:lng], wstate:ptr);                                          |
|     X_228:bat[:lng] := weld.algebraprojection(X_218:bat[:oid], X_210:bat[:lng], wstate:ptr);                                        |
|     X_256:bat[:lng] := weld.algebraprojection(X_234:bat[:oid], X_228:bat[:lng], wstate:ptr);                                        |
|     X_263:bat[:lng] := weld.algebraprojection(X_261:bat[:oid], X_256:bat[:lng], wstate:ptr);                                        |
|     X_53:bat[:lng] := weld.algebraprojection(C_13:bat[:oid], X_47:bat[:lng], wstate:ptr);                                           |
|     X_239:bat[:lng] := weld.algebraprojection(X_233:bat[:oid], X_53:bat[:lng], wstate:ptr);                                         |
|     (X_260:bat[:oid], X_261:bat[:oid], X_264:bat[:lng], X_263:bat[:lng], X_239:bat[:lng]) := weld.run(wstate:ptr, C_13:bat[:oid], X |
: _26:bat[:int], X_161:bat[:str], C_152:bat[:oid], "Brand#23":str, "==":str, X_168:bat[:str], "MED BOX":str, X_154:bat[:int], C_13:ba :
: t[:oid], X_26:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng, X_193:bat[:int], X_211:bat[:lng], X_47:bat[:lng], X_47:bat[:lng]);   :
|     X_278:bat[:dbl] := batcalc.dbl(2:int, X_263:bat[:lng]);                                                                         |
|     X_266:bat[:dbl] := batcalc.dbl(2:int, X_239:bat[:lng]);                                                                         |
|     X_270:bat[:dbl] := aggr.subavg(X_266:bat[:dbl], X_260:bat[:oid], X_261:bat[:oid], true:bit, true:bit);                          |
|     X_276:bat[:dbl] := batcalc.*(X_270:bat[:dbl], 0.2:dbl);                                                                         |
|     wstate:ptr := weld.initstate();                                                                                                 |
|     X_279:bat[:bit] := weld.batcalclt(X_278:bat[:dbl], X_276:bat[:dbl], wstate:ptr);                                                |
|     X_281:bat[:oid] := weld.algebraselect(X_279:bat[:bit], true:bit, true:bit, true:bit, true:bit, false:bit, wstate:ptr);          |
|     X_284:bat[:lng] := weld.algebraprojection(X_281:bat[:oid], X_264:bat[:lng], wstate:ptr);                                        |
|     X_286:lng := weld.aggrsum(X_284:bat[:lng], wstate:ptr);                                                                         |
|     X_286:lng := weld.run(wstate:ptr, X_278:bat[:dbl], X_276:bat[:dbl], true:bit, false:bit, X_264:bat[:lng]);                      |
|     X_287:lng := calc.lng(2:int, X_286:lng, 18:int, 5:int);                                                                         |
|     X_292:lng := calc./(X_287:lng, 700:lng);                                                                                        |
|     sql.resultSet("sys.L12":str, "avg_yearly":str, "decimal":str, 18:int, 3:int, 10:int, X_292:lng);                                |
| end user.main;                                                                                                                      |
| #inline               actions= 0 time=4 usec                                                                                        |
| #remap                actions= 5 time=28 usec                                                                                       |
| #costmodel            actions= 1 time=4 usec                                                                                        |
| #coercion             actions= 0 time=5 usec                                                                                        |
| #evaluate             actions=12 time=70 usec                                                                                       |
| #emptybind            actions=23 time=32 usec                                                                                       |
| #pushselect           actions= 7 time=51 usec                                                                                       |
| #aliases              actions=38 time=26 usec                                                                                       |
| #deadcode             actions=118 time=35 usec                                                                                      |
| #weld                 actions=27 time=65 usec                                                                                       |
| #aliases              actions= 0 time=0 usec                                                                                        |
| #constants            actions=16 time=32 usec                                                                                       |
| #commonTerms          actions= 3 time=33 usec                                                                                       |
| #projectionpath       actions= 0 time=4 usec                                                                                        |
| #deadcode             actions= 3 time=12 usec                                                                                       |
| #matpack              actions= 0 time=0 usec                                                                                        |
| #multiplex            actions= 0 time=2 usec                                                                                        |
| #profiler             actions=1 time=1 usec                                                                                         |
| #candidates           actions=1 time=1 usec                                                                                         |
| #deadcode             actions= 0 time=10 usec                                                                                       |
| #wlc                  actions= 0 time=0 usec                                                                                        |
| #garbagecollector     actions= 1 time=105 usec                                                                                      |
| #total                actions=25 time=709 usec                                                                                      |
+-------------------------------------------------------------------------------------------------------------------------------------+
74 tuples
