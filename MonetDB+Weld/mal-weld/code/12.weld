|v31:vec[i32], v31hseqbase:i64, v21:vec[i32], v21hseqbase:i64, v38:vec[i32], v38hseqbase:i64, v18:vec[i64], v18hseqbase:i64, v63:i8, v63:i8, v65:i8, v11:i32, v239:i32, v45:vec[u8], v45hseqbase:i64, v45str:vec[i8], v45stroffset:i64, v9:vec[i8], v82:vec[i8], v9:vec[i8], v10:vec[i8], v52:vec[i64], v52hseqbase:i64, v55:vec[i64], v55hseqbase:i64, v56:vec[i64], v56hseqbase:i64, v54:vec[i64], v54hseqbase:i64, v96:vec[i64], v96hseqbase:i64, v107:i32, v107:i32, v65:i8, v110:i64, v98:vec[u8], v98hseqbase:i64, v98str:vec[i8], v98stroffset:i64, v1:vec[i8], v2:vec[i8], v1:vec[i8], v2:vec[i8],i8MIN:i8, i8MAX:i8, i32MIN:i32, i32MAX:i32, i64MIN:i64, i64MAX:i64, f32MIN:f32, f32MAX:f32, f64MIN:f64, f64MAX:f64,i8nil:i8, i32nil:i32, oidnil:i64, i64nil:i64, f32nil:f32, f64nil:f64|
let v66 = result(
	for (zip(v31, v21), appender[?], |b , i, x|
		merge(b, i8((x.$0) > (x.$1)))
	));
let v66hseqbase = 0L;
let v59 = result(
	for (zip(v31, v38), appender[?], |b , i, x|
		merge(b, i8((x.$0) < (x.$1)))
	));
let v59hseqbase = 0L;
let v62 = result(
	for (rangeiter(0L, 60175L, 1L), appender[i64], |b: appender[i64], i: i64, oid: i64|
		if (v63 <= lookup(v59, oid - v59hseqbase)    &&    v63 >= lookup(v59, oid - v59hseqbase),
			merge(b, oid),
			b
		)
	));
let v62hseqbase = 0L;
let v68 = result(
	for (v62, appender[i64], |b: appender[i64], i: i64, oid: i64|
		if (v63 <= lookup(v66, oid - v66hseqbase)    &&    v63 >= lookup(v66, oid - v66hseqbase),
			merge(b, oid),
			b
		)
	));
let v68hseqbase = 0L;
let v73 = result(
	for (v68, appender[i64], |b: appender[i64], i: i64, oid: i64|
		if (v11 <= lookup(v38, oid - v38hseqbase)    &&    v239 > lookup(v38, oid - v38hseqbase),
			merge(b, oid),
			b
		)
	));
let v73hseqbase = 0L;
let v81 = result(
	for (v73, appender[i64], |b, i, oid|
		let offset = lookup(v45, oid - v45hseqbase);

		if (strslice(v45str, i64(offset) + v45stroffset) == v9,
			merge(b, oid),
			b
		)
	));
let v81hseqbase = 0L;
let v85 = result(
	for (v73, appender[i64], |b, i, oid|
		let offset = lookup(v45, oid - v45hseqbase);

		if (strslice(v45str, i64(offset) + v45stroffset) == v9,
			merge(b, oid),
			b
		)
	));
let v85hseqbase = 0L;
let left = v81;
let right = v85;
let iter_res = if(len(left) > 0L && len(right) > 0L,
	iterate({0L, 0L, appender[i64]}, |x|
		let leftIdx = x.$0;

		let rightIdx = x.$1;

		let b = x.$2;

		let leftVal = lookup(left, leftIdx);

		let rightVal = lookup(right, rightIdx);

		let output = 
		if(leftVal < rightVal,
			{leftIdx + 1L, rightIdx, merge(b, leftVal)},
			if (leftVal > rightVal,
				{leftIdx, rightIdx + 1L, merge(b, rightVal)},
				{leftIdx + 1L, rightIdx + 1L, merge(b, leftVal)}
			)
		);

		{output, output.$0 < len(left) && output.$1 < len(right)}),
	{0L, 0L, appender[i64]});
let res = iter_res.$2;
let res = for(rangeiter(iter_res.$0, len(left), 1L), res, |b, i, x| merge(b, lookup(left, x)));
let res = for(rangeiter(iter_res.$1, len(right), 1L), res, |b, i, x| merge(b, lookup(right, x)));
let v86 = result(res);
let v86hseqbase = 0L;
let v89 = result(
	for (v73, appender[i64], |b, i, oid|
		let offset = lookup(v45, oid - v45hseqbase);

		if (strslice(v45str, i64(offset) + v45stroffset) == v10,
			merge(b, oid),
			b
		)
	));
let v89hseqbase = 0L;
let left = v86;
let right = v89;
let iter_res = if(len(left) > 0L && len(right) > 0L,
	iterate({0L, 0L, appender[i64]}, |x|
		let leftIdx = x.$0;

		let rightIdx = x.$1;

		let b = x.$2;

		let leftVal = lookup(left, leftIdx);

		let rightVal = lookup(right, rightIdx);

		let output = 
		if(leftVal < rightVal,
			{leftIdx + 1L, rightIdx, merge(b, leftVal)},
			if (leftVal > rightVal,
				{leftIdx, rightIdx + 1L, merge(b, rightVal)},
				{leftIdx + 1L, rightIdx + 1L, merge(b, leftVal)}
			)
		);

		{output, output.$0 < len(left) && output.$1 < len(right)}),
	{0L, 0L, appender[i64]});
let res = iter_res.$2;
let res = for(rangeiter(iter_res.$0, len(left), 1L), res, |b, i, x| merge(b, lookup(left, x)));
let res = for(rangeiter(iter_res.$1, len(right), 1L), res, |b, i, x| merge(b, lookup(right, x)));
let v90 = result(res);
let v90hseqbase = 0L;
let v95 = result(
	for (v90, appender[?], |b, i, oid|
		merge(b, lookup(v52, oid - v52hseqbase))
	));
let v95hseqbase = 0L;
let joinResult = cudf[weldJoinNoCandListi64, {vec[i64], vec[i64], i32, i32}](v95, v96, v65, v110);
let v105 = joinResult.$0;
let v105bat = joinResult.$2;
let v105hseqbase = 0L;
let v106 = joinResult.$1;
let v106bat = joinResult.$3;
let v106hseqbase = 0L;
let v94 = result(
	for (v90, appender[?], |b, i, oid|
		merge(b, lookup(v45, oid - v45hseqbase))
	));
let v94hseqbase = 0L;
let v94str = v45str;
let v94stroffset = v45stroffset;
let v114 = result(
	for (v105, appender[?], |b, i, oid|
		merge(b, lookup(v94, oid - v94hseqbase))
	));
let v114hseqbase = 0L;
let v114str = v94str;
let v114stroffset = v94stroffset;
let groupHash = result(
	for(zip(v114), dictmerger[ i64, i64, min], |b, i, n|
		merge(b, { i64(n), i})
	));
let groupHashVec = tovec(groupHash);
let groupIdsDict = result(
	for(groupHashVec, dictmerger[ i64, i64, min], |b, i, n|
		merge(b, {n.$0, i})
	));
let empty = result(
	for(rangeiter(0L, len(groupHashVec), 1L), appender[i64], |b, i, n|
		merge(b, 0L)
	));
let ids = for(zip(v114), appender[i64], |b, i, n|
	let groupId = lookup(groupIdsDict,  i64(n));

	merge(b, groupId));
let counts = for(zip(v114), vecmerger[i64, +](empty), |b, i, n|
	let groupId = lookup(groupIdsDict,  i64(n));

	merge(b, {groupId, 1L}));
let v158 = result(ids);
let v158hseqbase = 0L;
let v160 = result(counts);
let v160hseqbase = 0L;
let v159 = result(
	for(groupHashVec, vecmerger[i64, +](empty), |b, i, n|
		merge(b, {i, lookup(groupHash, n.$0)})
	));
let v159hseqbase = 0L;
let v161 = result(
	for (v159, appender[?], |b, i, oid|
		merge(b, lookup(v114, oid - v114hseqbase))
	));
let v161hseqbase = 0L;
let v161str = v114str;
let v161stroffset = v114stroffset;
let v104 = result(
	for (rangeiter(0L, 15000L, 1L), appender[?], |b, i, oid|
		merge(b, lookup(v98, oid - v98hseqbase))
	));
let v104hseqbase = 0L;
let v104str = v98str;
let v104stroffset = v98stroffset;
let v116 = result(
	for (v106, appender[?], |b, i, oid|
		merge(b, lookup(v104, oid - v104hseqbase))
	));
let v116hseqbase = 0L;
let v116str = v104str;
let v116stroffset = v104stroffset;
let v144 = result(
	for (v116, appender[?], |b , i, x|
		merge(b, i8((strslice(v116str, i64(x) + v116stroffset)) != (v1)))
	));
let v144hseqbase = 0L;
let v148 = result(
	for (v116, appender[?], |b , i, x|
		merge(b, i8((strslice(v116str, i64(x) + v116stroffset)) != (v2)))
	));
let v148hseqbase = 0L;
let v149 = result(
	for (zip(v144, v148), appender[?], |b , i, x|
		merge(b, i8((x.$0) & (x.$1)))
	));
let v149hseqbase = 0L;
let v151 = result(
	for(v149, appender[i8], |b, i, x|
		if(x == i8nil,
			merge(b, 1c),
			merge(b, 0c)
		)
	));
let v151hseqbase = 0L;
let v125 = result(
	for (v116, appender[?], |b , i, x|
		merge(b, i8((strslice(v116str, i64(x) + v116stroffset)) == (v1)))
	));
let v125hseqbase = 0L;
let v131 = result(
	for (v116, appender[?], |b , i, x|
		merge(b, i8((strslice(v116str, i64(x) + v116stroffset)) == (v2)))
	));
let v131hseqbase = 0L;
let v132 = result(
	for (zip(v125, v131), appender[?], |b , i, x|
		merge(b, i8((x.$0) | (x.$1)))
	));
let v132hseqbase = 0L;
let v134 = result(
	for(v132, appender[i8], |b, i, x|
		if(x == i8nil,
			merge(b, 1c),
			merge(b, 0c)
		)
	));
let v134hseqbase = 0L;
{v158, v159, v161, v161str, v149, v151, v132, v134}


============================================

|v167:vec[i64], v167hseqbase:i64, v165:vec[i64], v165hseqbase:i64, v162:vec[i64], v162hseqbase:i64, v161:vec[u8], v161hseqbase:i64, v161str:vec[i8], v161stroffset:i64,i8MIN:i8, i8MAX:i8, i32MIN:i32, i32MAX:i32, i64MIN:i64, i64MAX:i64, f32MIN:f32, f32MAX:f32, f64MIN:f64, f64MAX:f64,i8nil:i8, i32nil:i32, oidnil:i64, i64nil:i64, f32nil:f32, f64nil:f64|
let v171 = result(
	for (v167, appender[?], |b, i, oid|
		merge(b, lookup(v165, oid - v165hseqbase))
	));
let v171hseqbase = 0L;
let v170 = result(
	for (v167, appender[?], |b, i, oid|
		merge(b, lookup(v162, oid - v162hseqbase))
	));
let v170hseqbase = 0L;
let v169 = result(
	for (v167, appender[?], |b, i, oid|
		merge(b, lookup(v161, oid - v161hseqbase))
	));
let v169hseqbase = 0L;
let v169str = v161str;
let v169stroffset = v161stroffset;
{v171, v170, v169, v169str}


============================================

